import math
import pygame

WIDTH, HEIGHT = 610, 610
screen = pygame.display.set_mode((WIDTH, HEIGHT))
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)


BRICK_WIDTH = 50
BRICK_HEIGHT = 20

COLORS = {'PURPLE': (166, 45, 151),
          'LIGHT_BLUE': (0, 128, 255),
          'ORANGE': (255, 128, 0),
          'GREEN': (0, 255, 0),
          'YELLOW': (255, 255, 0)
          }


class Brick:
    width = BRICK_WIDTH
    height = BRICK_HEIGHT

    def __init__(self, x, y, color):
        self.x = x
        self.y = y
        self.color = color
        self.rect = pygame.Rect(x, y, self.width, self.height)

    def draw(self, screen):
        pygame.draw.rect(screen, self.color, self.rect)


class Player:
    width = 80
    height = 15

    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.rect = pygame.Rect(x, y, self.width, self.height)
        self.speed = 5

    def draw(self, screen, color):
        pygame.draw.rect(screen, color, self.rect)

    def move(self, direction):
        if direction == "right" and self.x + self.speed <= WIDTH - self.width - 0.5:
            self.x += self.speed
        if direction == "left" and self.x - self.speed >= 0.5:
            self.x -= self.speed

        self.rect = pygame.Rect(self.x, self.y, self.width, self.height)


class Ball:
    radius = 10
    reflect_x = pygame.math.Vector2(0, 1)
    reflect_y = pygame.math.Vector2(1, 0)

    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.speed_vec = pygame.math.Vector2(2, 4)

    def is_collide(self, other):
        ball_rect = pygame.Rect(self.x - self.radius, self.y - self.radius, 2 * self.radius, 2 * self.radius)
        return ball_rect.colliderect(other.rect)

    def check_collision_side(self, other):
        up_y = abs((self.y + self.radius) - other.y)
        down_y = abs((self.y - self.radius) - (other.y + other.height))

        left_x = abs((self.x + self.radius) - other.x)
        right_x = abs((self.x - self.radius) - (other.x + other.width))

        y = min(up_y, down_y)
        x = min(left_x, right_x)

        if x > y:
            return "y"
        else:
            return "x"

    def draw(self, screen, color):
        pygame.draw.circle(screen, color, (self.x, self.y), self.radius)

    def move(self, player, hit_bricks, lost):
        # Checks if the ball hit walls.
        if self.x + self.speed_vec.x <= self.radius or self.x + self.speed_vec.y >= WIDTH - self.radius:
            self.speed_vec.x *= -1

        if self.y + self.speed_vec.y <= self.radius:
            self.speed_vec.y *= -1

        if self.y + self.speed_vec.y >= HEIGHT - self.radius:
            lost = False

        # Checks if the ball hits the player.
        if self.is_collide(player) and self.speed_vec.y > 0:
            hitting_range = player.width + 2 * self.radius
            angles_range = 160
            hitting_point = (player.x + player.width + self.radius) - self.x
            new_angle = math.radians(((hitting_point * angles_range) / hitting_range) + 10)
            x_vec = math.cos(new_angle)
            y_vec = -math.sin(new_angle)
            new_speed_vec = pygame.math.Vector2(x_vec, y_vec)
            new_speed_vec.scale_to_length(self.speed_vec.magnitude())
            self.speed_vec = new_speed_vec

        hit_x = False
        hit_y = False
        for brick in hit_bricks:
            if self.check_collision_side(brick) == "x":
                hit_x = True
            else:
                hit_y = True

        if hit_x:
            self.speed_vec.x *= -1
        if hit_y:
            self.speed_vec.y *= -1

        self.x += self.speed_vec.x
        self.y += self.speed_vec.y


def create_bricks(colors):
    bricks = []

    lines = 4
    start_height = 50
    num_bricks_in_line = 9
    space = 9
    edge_space = (WIDTH - (num_bricks_in_line * BRICK_WIDTH + (num_bricks_in_line - 1) * space)) // 2

    colors_lst = [color for color in colors.values()]

    for i in range(lines):
        y = start_height + i * (BRICK_HEIGHT + space)
        for j in range(num_bricks_in_line):
            x = edge_space + j * (BRICK_WIDTH + space)
            bricks.append(Brick(x, y, colors_lst[i % len(colors_lst)]))

    return bricks


def move_player(key_pressed, player):
    if key_pressed[pygame.K_d]:
        player.move("right")

    if key_pressed[pygame.K_a]:
        player.move("left")


clock = pygame.time.Clock()
FPS = 60


def main():
    lost = True
    bricks = create_bricks(COLORS)
    player = Player(WIDTH // 2, HEIGHT - 100)
    ball = Ball(WIDTH // 2, HEIGHT // 2)

    while lost:
        if len(bricks) == 0:
            bricks = create_bricks(COLORS)
        clock.tick(FPS)
        screen.fill(BLACK)
        ball.draw(screen, WHITE)
        player.draw(screen, WHITE)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()

        not_hit_bricks = []
        hit_bricks = []
        for brick in bricks:
            if not ball.is_collide(brick):
                not_hit_bricks.append(brick)
            else:
                hit_bricks.append(brick)

        bricks = not_hit_bricks

        for brick in bricks:
            brick.draw(screen)

        Ball.move(ball, player, hit_bricks, lost)

        key_pressed = pygame.key.get_pressed()
        move_player(key_pressed, player)
        pygame.display.update()

    main()


if __name__ == "__main__":
    main()
